policy_module(neoxa, 1.100.1)

########################################
#
# Declarations
#

type neoxa_t;
type neoxa_exec_t;
init_daemon_domain(neoxa_t, neoxa_exec_t)

permissive neoxa_t;

type neoxa_initrc_exec_t;
init_script_file(neoxa_initrc_exec_t)

type neoxa_conf_t;
files_type(neoxa_conf_t)

type neoxa_var_lib_t;
files_type(neoxa_var_lib_t)

type neoxa_var_run_t;
files_type(neoxa_var_run_t)

type neoxa_port_t;
corenet_port(neoxa_port_t)

########################################
#
# neoxa local policy
#
allow neoxa_t self:process { fork };

allow neoxa_t self:fifo_file rw_fifo_file_perms;
allow neoxa_t self:unix_stream_socket create_stream_socket_perms;

manage_dirs_pattern(neoxa_t, neoxa_conf_t, neoxa_conf_t)
manage_files_pattern(neoxa_t, neoxa_conf_t, neoxa_conf_t)

manage_dirs_pattern(neoxa_t, neoxa_var_lib_t, neoxa_var_lib_t)
manage_files_pattern(neoxa_t, neoxa_var_lib_t, neoxa_var_lib_t)
files_var_lib_filetrans(neoxa_t, neoxa_var_lib_t, { dir file })

manage_dirs_pattern(neoxa_t, neoxa_var_run_t, neoxa_var_run_t)
manage_files_pattern(neoxa_t, neoxa_var_run_t, neoxa_var_run_t)

sysnet_dns_name_resolve(neoxa_t)
corenet_all_recvfrom_unlabeled(neoxa_t)

allow neoxa_t self:tcp_socket create_stream_socket_perms;
corenet_tcp_sendrecv_generic_if(neoxa_t)
corenet_tcp_sendrecv_generic_node(neoxa_t)
corenet_tcp_sendrecv_all_ports(neoxa_t)
corenet_tcp_bind_generic_node(neoxa_t)

gen_require(`
    type neoxa_port_t;
')
allow neoxa_t neoxa_port_t:tcp_socket name_bind;

gen_require(`
    type neoxa_port_t;
')
allow neoxa_t neoxa_port_t:tcp_socket name_connect;

domain_use_interactive_fds(neoxa_t)

files_read_etc_files(neoxa_t)

miscfiles_read_localization(neoxa_t)

sysnet_dns_name_resolve(neoxa_t)

allow neoxa_t neoxa_exec_t:file execute_no_trans;
allow neoxa_t self:process setsched;
corecmd_exec_ls(neoxa_t)
corenet_tcp_connect_http_port(neoxa_t)
dev_read_urand(neoxa_t)
fs_getattr_xattr_fs(neoxa_t)
kernel_read_system_state(neoxa_t)
